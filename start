#!/bin/sh
#
# Checks the version of Bazel found in the PATH, and then initializes
# a new Bazel workspace with dummy Haskell build targets.

MIN_BAZEL_MAJOR=0
MIN_BAZEL_MINOR=27

MAX_BAZEL_MAJOR=0
MAX_BAZEL_MINOR=28

set -e

check_files_dont_exist () {
    if [ -e WORKSPACE ] || [ -e BUILD ] || [ -e BazelExample.hs ]
    then
        echo "Current directory already has WORKSPACE and/or BUILD and/or BazelExample.hs files." >/dev/stderr
        exit 1
    fi
}

check_bazel_version () {
    local actual_raw=$(bazel version | egrep '^Build label:' | egrep -o '[0-9.]+')

    IFS=. read actual_major actual_minor actual_patch <<EOF
$actual_raw
EOF

    local expected_min=$MIN_BAZEL_MAJOR.$MIN_BAZEL_MINOR.0
    local expected_max=$MAX_BAZEL_MAJOR.$MAX_BAZEL_MINOR.x

    if [ "$actual_major" -gt "$MAX_BAZEL_MAJOR" ] || (
        [ "$actual_major" -eq "$MAX_BAZEL_MAJOR" ] &&
            [ "$actual_minor" -gt "$MAX_BAZEL_MINOR" ] )
    then
	      echo "Warning: a too new version of Bazel detected: v${actual_raw}."  >/dev/stderr
	      echo "         Recommended versions are from v${expected_min} to v${expected_max}."  >/dev/stderr
    elif [ "$actual_major" -lt "$MIN_BAZEL_MAJOR" ] || (
          [ "$actual_major" -eq "$MIN_BAZEL_MAJOR" ] &&
            [ "$actual_minor" -lt "$MIN_BAZEL_MINOR" ] )
    then
        echo "Error: Need at least Bazel v${expected_min} but v${actual_raw} detected." >/dev/stderr
        exit 1
    fi
}

check_files_dont_exist
check_bazel_version

cat > WORKSPACE <<"EOF"
# Give your project a name. :)
workspace(name = "YOUR_PROJECT_NAME_HERE")

# Load the repository rule to download an http archive.
load(
    "@bazel_tools//tools/build_defs/repo:http.bzl",
    "http_archive"
)

# Download `rules_haskell`.
# and make it accessible `@rules_haskell`.
http_archive(
    name = "rules_haskell",
    strip_prefix = "rules_haskell-0.9.1",
    urls = ["https://github.com/tweag/rules_haskell/archive/v0.9.1.tar.gz"],
    sha256 = "36c52c9709555a6c939b71c04fe0053ba89425f8d89c3c23c9b0ddd3ad91120e",
)

load(
    "@rules_haskell//haskell:repositories.bzl",
    "rules_haskell_dependencies",
    "rules_haskell_toolchains",
)

# Setup all Bazel dependencies required by `rules_haskell`.
rules_haskell_dependencies()

# Download a GHC binary distribution from haskell.org
# and register it as a toolchain.
rules_haskell_toolchains()
EOF

cat > .bazelrc <<"EOF"
build:ci --loading_phase_threads=1
build:ci --jobs=2
build:ci --verbose_failures
common:ci --color=no
test:ci --test_output=errors

build --incompatible_use_python_toolchains=false

# test environment does not propagate locales by default
# some tests reads files written in UTF8, we need to propagate the correct
# environment variables, such as LOCALE_ARCHIVE
# We also need to setup an utf8 locale
test --test_env=LANG=en_US.utf8 --test_env=LOCALE_ARCHIVE

try-import .bazelrc.local
EOF

cat > BUILD.bazel <<"EOF"
# Set all targetâ€™s visibility in this package to "public".
package(default_visibility = ["//visibility:public"])

# Load `rules_haskell` rules.
load(
    "@rules_haskell//haskell:defs.bzl",
    "haskell_toolchain_library",
    "haskell_library",
    "haskell_binary",
)

# `haskell_toolchain_library` can access builtin GHC packages
# and assign them a bazel target name, so that they
# can be referenced as dependencies.
haskell_toolchain_library(name = "base")

# You can add your own libraries with `haskell_library`.
# haskell_library(
#     name = "MY_LIBRARY_NAME",
#     src_strip_prefix = "src",
#     srcs = glob(['src/**/*.hs']),
#     deps = [
#         "base_pkg"
#     ],
# )

# An example binary using the Prelude module from the
# GHC base package, to print the hello world.
haskell_binary(
    name = "example",
    srcs = [":Example.hs"],
    deps = [":base"],
)
EOF

cat > Example.hs <<"EOF"
module Main where

import Prelude (putStrLn)

main = putStrLn "Hello from rules_haskell!"
EOF

cat <<"EOF"
WORKSPACE and initial BUILD files created. To run Bazel and build the example:

    $ bazel run //:example
EOF

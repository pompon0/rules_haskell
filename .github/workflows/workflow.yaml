name: Continuous integration
on: [push]
env:
  # Bump this number to invalidate the GH actions cache
  cache-version: 0

jobs:
  test-nixpkgs:
    name: Build & Test - Nixpkgs
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos]
    runs-on: ${{ matrix.os }}-latest
    steps:
      - uses: actions/checkout@v2
      - name: Mount Bazel cache
        uses: actions/cache@v2
        with:
          path: ~/repo-cache
          key: repo-cache-${{ runner.os }}-nixpkgs-${{ env.cache-version }}
      - uses: cachix/install-nix-action@v12
        with:
          nix_path: nixpkgs=./nixpkgs/default.nix
      - name: Configure
        env:
          BUILDBUDDY_API_KEY: ${{ secrets.BUILDBUDDY_API_KEY }}
        run: |
          case ${{ matrix.os }} in
            macos) BUILD_CONFIG=macos-nixpkgs;;
            ubuntu) BUILD_CONFIG=linux-nixpkgs;;
          esac
          cat >.bazelrc.local <<EOF
          common --config=ci
          build --config=$BUILD_CONFIG
          build --remote_header=x-buildbuddy-api-key="$BUILDBUDDY_API_KEY"
          EOF
          cat >~/.netrc <<EOF
          machine api.github.com
                  password ${{ secrets.GITHUB_TOKEN }}
          EOF
      - name: Check Bazel version
        run: |
          nix-shell --arg docTools false --pure --run .ci/check-bazel-version
      - name: Build & test
        run: |
          nix-shell --arg docTools false --pure --run '
            set -euo pipefail
            ./tests/run-start-script.sh --use-nix
            bazel build //tests:run-tests
            ./bazel-ci-bin/tests/run-tests
            bazel coverage //tests/...
            '
  test-bindist:
    name: Build & Test - bindist
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos, windows]
    runs-on: ${{ matrix.os }}-latest
    steps:
      - uses: actions/checkout@v2
      - name: Mount Bazel cache
        uses: actions/cache@v2
        with:
          path: ~/repo-cache
          key: repo-cache-${{ runner.os }}-bindist-${{ env.cache-version }}
      - name: Install Bazel
        shell: bash
        run: |
          BAZEL_DIR="$(.ci/fetch-bazel-bindist)"
          mv $BAZEL_DIR $HOME/bazel
      - name: Configure
        env:
          BUILDBUDDY_API_KEY: ${{ secrets.BUILDBUDDY_API_KEY }}
        shell: bash
        run: |
          case ${{ matrix.os }} in
            macos) BUILD_CONFIG=macos-bindist;;
            ubuntu) BUILD_CONFIG=linux-bindist;;
            windows) BUILD_CONFIG=windows-bindist;;
          esac
          cat >.bazelrc.local <<EOF
          common --config=ci
          build --config=$BUILD_CONFIG
          build --remote_header=x-buildbuddy-api-key="$BUILDBUDDY_API_KEY"
          EOF
          cat >~/.netrc <<EOF
          machine api.github.com
                  password ${{ secrets.GITHUB_TOKEN }}
          EOF
      - name: Build & test
        shell: bash
        run: |
          export PATH=$HOME/bazel:$PATH
          [[ ${{ matrix.os }} == macos ]] && export BAZEL_USE_CPP_ONLY_TOOLCHAIN=1
          ./tests/run-start-script.sh --use-bindists
          bazel test //tests/...
          # Test stack_snapshot pinning
          # NOTE keep in sync with tests/RunTests.hs
          bazel run @stackage-pinning-test-unpinned//:pin
          bazel build @stackage-pinning-test//:hspec
